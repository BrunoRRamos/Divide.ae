// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum NotificationType {
  ALERTA
  AVISO
  VENCIMENTO
}

model User {
  id      String @id @default(cuid())
  name    String
  email   String @unique
  clerkId String @unique

  groups                Group[]        @relation("UserGroups")
  payments              Payment[]
  myGroups              Group[] // Groups that the user created
  receivedNotifications Notification[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Bill      Bill[]
  Receipt   Receipt[]
}

model Group {
  id          String    @id @default(cuid())
  name        String
  description String?
  fixedTax    Float?    @default(0)
  variableTax Float?    @default(0)
  closedAt    DateTime?
  code        String    @unique

  users    User[]    @relation("UserGroups")
  bills    Bill[]
  payments Payment[]
  userId   String
  user     User      @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Receipt   Receipt[]
}

model Bill {
  id              String  @id @default(cuid())
  name            String
  description     String?
  value           Float
  quantity        Int     @default(1)
  recurringPeriod Int? // Days here

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id])
  payment   Payment? @relation(fields: [paymentId], references: [id])
  paymentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Receipt   Receipt? @relation(fields: [receiptId], references: [id])
  receiptId String?
}

model Payment {
  id       String  @id @default(cuid())
  value    Float
  accepted Boolean @default(false)

  userId  String
  user    User   @relation(fields: [userId], references: [id])
  groupId String
  group   Group  @relation(fields: [groupId], references: [id])

  receipts Receipt?
  bills    Bill[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Receipt {
  id       String @id @default(cuid())
  fileName String
  uri      String
  ext      String

  payment   Payment @relation(fields: [paymentId], references: [id])
  paymentId String  @unique

  bills Bill[]

  user    User   @relation(fields: [userId], references: [id])
  userId  String
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id       String           @id @default(cuid())
  type     NotificationType
  message  String
  sentDate DateTime         @default(now())
  userId   String
  user     User             @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}
